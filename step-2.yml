AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  TeamRoleArn:
    Type: String
    Description: ARN of the TeamRole IAM Role
Resources:
  WS-VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  WS-PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref WS-VPC
  WS-PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 'us-east-1b'
      VpcId: !Ref WS-VPC
  WS-PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 'us-east-1c'
      VpcId: !Ref WS-VPC
  WS-PrepIGateway:
    Type: AWS::EC2::InternetGateway
  WS-GatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref WS-PrepIGateway
      VpcId: !Ref WS-VPC
  WS-PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WS-VPC
  WS-PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ref WS-VPC
  WS-PrivateRouteTableAssoc1:
    Type: Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WS-PrivateSubnetRouteTable
      SubnetId: !Ref WS-PrivateSubnet1
  WS-PrivateRouteTableAssoc2:
    Type: Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WS-PrivateSubnetRouteTable
      SubnetId: !Ref WS-PrivateSubnet2
  WS-PublicRouteTableAssoc:
    Type: Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WS-PublicSubnetRouteTable
      SubnetId: !Ref WS-PublicSubnet
  WS-PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WS-PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WS-PrepIGateway
## Prepped a bunch of stuff above
## including a cloud9 env.
  WS-RedshiftPG:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Parameter group for the workshop Redshift cluster
      ParameterGroupFamily: 'redshift-1.0'
      Parameters:
        - ParameterName: enable_user_activity_logging
          ParameterValue: 'true'
        - ParameterName: max_concurrency_scaling_clusters
          ParameterValue: '1'
        - ParameterName: require_ssl
          ParameterValue: 'true'
        - ParameterName: wlm_json_configuration
          ParameterValue: '[{"auto_wlm":true}]'
  WS-RedshiftSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Subnet group for the Redshift cluster
      SubnetIds:
        - !Ref WS-PrivateSubnet2
        - !Ref WS-PrivateSubnet1
  WS-RedshiftIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
        - PolicyName: KMS Key access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:generateDataKey
                  - kms:GenerateDataKeyWithoutPlaintext
                Resource: '*'
  WS-RedshiftKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A key for encrypting data in Redshift cluster
      EnableKeyRotation: 'true'
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: ws-RSenc-key
        Statement:
          - Sid: Enable IAM user permissions for administration
            Effect: Allow
            Principal:
              AWS: !Ref TeamRoleArn
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of key inside the cluster
            Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
  WS-RedshiftCluster:
    Type: AWS::Redshift::Cluster
    DeletionPolicy: Delete
    Properties:
      AllowVersionUpgrade: 'true'
      AquaConfigurationStatus: auto
      ClusterIdentifier: 'Workshop-Redshift-Cluster'
      ClusterParameterGroupName: !Ref WS-RedshiftPG
      ClusterSubnetGroupName: !Ref WS-RedshiftSubnetGroup
      DBName: 'workshopredshiftdb'
      Encrypted: 'true'
      ClusterType: multi-node
      IamRoles:
        - !GetAtt WS-RedshiftIAMRole.Arn
      KmsKeyId: !Ref WS-RedshiftKmsKey
      ManualSnapshotRetentionPeriod: 1
      MasterUsername: 'admin'
      MasterUserPassword: 'Master123'
      NodeType: 'dc2.large'
      NumberOfNodes: 2
      PubliclyAccessible: 'false'
      RotateEncryptionKey: 'true'